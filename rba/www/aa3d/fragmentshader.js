// Generated by CoffeeScript 2.3.1
(function() {
  window.fragmentshader_glsl = "\nprecision highp float;\nuniform sampler2D map;\nvarying vec2 vUv;\n\n\nvoid main() {\n\n  float mushroom_size = 0.23;\n  float pmt_size      = 0.05;\n  float ring_size     = 0.07;\n\n  float p2 = pmt_size * pmt_size;\n  float r2 = ring_size * ring_size;\n\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0 );\n\n  float phi_prime = vUv.x;\n  float theta     = vUv.y;\n  float up        = 0.0; \n\n  if ( theta < 0.5  ) // force theta > 0.5\n    {\n      phi_prime += 1.0/12.0;\n      theta = 1.0-theta;\n      up = 100.0;\n    }\n  \n  phi_prime = mod( phi_prime , 1./6. );\n  if ( phi_prime > 1.0/12. ) phi_prime = 1.0/6. - phi_prime;\n\n  float a = sin( theta * 3.1415 );\n  a = a*a*4.0;\n		\n\n  float A = a*phi_prime * phi_prime;\n  float B = a * (1.0/12.0 - phi_prime) *(1.0/12.0 - phi_prime) ;	  \n\n  // the theta's of the dom positions are : 0.980875, 1.2706, 1.872738, 2.162463, 2.579597, 3.1415923073180982\n \n  float d1 = (1.0-theta)* (1.0-theta);\n  d1 = min( d1, up + A + ( theta-(2.579597/3.141592 ) ) *  ( theta-(2.579597/3.141592 ) ) );\n  d1 = min (d1, B + ( theta-(2.16/3.141592 ) )     *  ( theta-(2.16/3.141592     ) ) );\n  d1 = min( d1, A + ( theta-(1.872/3.141592    ) ) *  ( theta-(1.872/3.141592    ) ) );  \n\n  if ( d1 < r2 ) gl_FragColor = vec4( 0.95, 0.8, 1.0, 1.0 );\n  if ( d1 < p2 ) gl_FragColor = vec4( 0.9, 0.8, 0.0, 1.0 );\n\n  if ( vUv.y < mushroom_size    )  gl_FragColor   = vec4( 0.7, 0.7, 0.7, 1.0 );\n\n}";

  window.fragmentshader_antares_glsl = "\nprecision highp float;\nuniform sampler2D map;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vPos;\n\n#include <common>\n#include <bsdfs>\n#include <lights_pars>\n\nvoid main() {\n\n  float pmt_size      = 0.20;\n  float theta     = vUv.y;\n  \n  vec4 col;\n  vec4 addedLights;\n  \n  if (theta < pmt_size) {\n  col = vec4(1.0 , 0.85, 0.0 ,1.0);\n  }\n  else {\n  col = vec4(0.1, 0.1, 0.0 , 1.0 );\n  }\n  \n  \n  for(int l = 0; l < NUM_POINT_LIGHTS; l++) {\n    vec3 adjustedLight = pointLights[l].position;\n    vec3 lightColor    = pointLights[l].color;\n    vec3 lightDirection = normalize(vPos - adjustedLight);\n    addedLights.rgb += clamp(   dot(-lightDirection, vNormal), 0.0, 0.8 ) * lightColor ;\n    \n  }\n  \n    gl_FragColor =  mix( col , addedLights, addedLights);\n  \n  \n}";

}).call(this);
