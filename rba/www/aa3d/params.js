// Generated by CoffeeScript 2.3.1
(function() {
  var make_parlist, pardesc, parse_props;

  String.prototype.contains = function(it) {
    return this.indexOf(it) !== -1;
  };

  
  // - a ^ before the callback name means it onFinishChange will be used
  pardesc = "\nfolder Detector \n bgColor     def=000022                   callback=setBackgroundColor\n floorColor  def=484830                   callback=addFloor\n floorOpacity def=0.5\n stringColor def=ff00ff\n stringWidth def=2\n\nfolder Doms                                callback=addDoms\n  showDoms    def=true \n  domColor    def=335588                    \n  domSize     def=5         range=[1,15]    \n  domDetail   def=9         range=[2,15]    \n  domFactor   def=5         range=[2,15]    callback=addDoms,addHits\n  domFragmentShader def=fragmentshader_glsl choices=['fragmentshader_antares_glsl','fragmentshader_glsl'] callback=addDoms\n  endfolder\n endfolder\n\nfolder Tracks                               callback=addTracks\n trackWidth   def=1        range=[.1,5]     \n trackLen     def=20       range=[5,500]\n neuLen       def=5000     range=[100,10000]\n neuColor     def=ffff00\n muColor      def=0000ff\n trackColor   def=00ff00         \n mcTrackColor def=ff0000         \n tracks       def=mc_trks        \nendfolder\n\nfolder Hits   callback=addHits\n hitStyle     def=cone     choices=['cone','sphere','disk']\n hitDetail    def=8        range=[1,15]\n hitWidth     def=1        range=[0.1,10]\n hitLength    def=1        range=[0.1,10]\n hitSet       def=hits     choices=['hits','mchits','none']\n palette      def=doppler  choices=['doppler','hue']\n ampFunc      def=7*Math.sqrt(hit.tot)\n depthSort    func\n depthSortEvery def=100\nendfolder\n\nfolder Camera\n camDistance  def=1000     range=[1,10000]  callback=addCamera\n camHeight    def=500      range=[1,1000]   callback=addCamera\nendfolder\n\nfolder animation\n rotate        def=true    \n rotationSpeed def=2        range=[-20,20]\n animate       def=false\n aniTotFactor  def=5        range=[0.1,10]    callback=addHits\n ns_per_s      def=1000     range=[10,2000]\n introTime     def=0        range=[-3000,1000]\n outroTime     def=0        range=[-3000,1000]\nendfolder\n\nscreenshot    func\nscreenshot360 func\n\ndemo           def=\"null\"   choices=['null','vr_demo1']\n\nfolder network\nrelay_sever    def=\"www.cherenkof.nl:8181\"\ntoken          def=\"12345\"\n\nendfolder";

  parse_props = function(lst, obj) {
    var j, k, l, len, v;
    for (j = 0, len = lst.length; j < len; j++) {
      l = lst[j];
      [k, v] = l.split('=');
      if (typeof v === 'undefined') {
        v = true; // no = in l
      }
      obj[k] = v;
    }
    if (obj.def) {
      console.log(obj.name, obj.def);
      if (obj.name.contains("olor") && !obj.def.contains("0x")) {
        obj.def = Number("0x" + obj.def);
      } else {
        if (!isNaN(obj.def)) {
          obj.def = Number(obj.def);
        }
        if (obj.def === 'true') {
          obj.def = true;
        }
        if (obj.def === 'false') {
          obj.def = false;
        }
      }
    }
    if (obj.callback && obj.callback.contains(',')) {
      return obj.callback = obj.callback.split(',');
    }
  };

  make_parlist = function(desc) {
    var j, len, line, obj, r, ref, v;
    r = [];
    ref = desc.split('\n');
    for (j = 0, len = ref.length; j < len; j++) {
      line = ref[j];
      v = line.match(/\S+/g); //thank god for stackoverflow
      if (!v) {
        continue;
      }
      obj = {};
      obj.name = v[0];
      if (obj.name === 'folder') {
        obj.folder = v[1];
        parse_props(v.slice(2), obj);
        r.push(obj);
        continue;
      }
      if (obj.name === 'endfolder') {
        r.push(obj);
        continue;
      }
      parse_props(v.slice(1), obj);
      r.push(obj);
    }
    return r;
  };

  window.buildmenu = function(parameters = {}, callback_functions = {}, parlist = make_parlist(pardesc)) {
    var cb, cb_, error, f, gui, i, item, j, len, menu_stack, par, r;
    console.log("dsljksjkgls");
    parameters.__callbacks = {};
    parameters.__controllers = {};
    r = new dat.GUI;
    menu_stack = [r];
    for (i = j = 0, len = parlist.length; j < len; i = ++j) {
      par = parlist[i];
      gui = menu_stack.slice(-1)[0];
      if (!gui) {
        console.log("too many endfolder");
      }
      if (par.name === 'folder') {
        f = gui.addFolder(par.folder);
        if (par.callback) {
          f.callback = par.callback;
        }
        menu_stack.push(f);
        continue;
      }
      if (par.name === 'endfolder') {
        menu_stack.pop();
        continue;
      }
      if (par.func) {
        gui.add(callback_functions, par.name);
        continue;
      }
      if (par.name) {
        parameters[par.name] = par.def;
        if (par.name.contains("Color") || par.name.contains("color")) {
          try {
            item = gui.addColor(parameters, par.name);
          } catch (error1) {
            error = error1;
            console.log("error setting color", par.name, parameters[par.name]);
          }
        } else {
          if (par.range) {
            par.range = eval(par.range);
            item = gui.add(parameters, par.name, par.range[0], par.range[1]);
          }
          if (par.choices) {
            console.log("aaa", par.name, parameters[par.name]);
            item = gui.add(parameters, par.name, eval(par.choices));
          }
          if (!par.range && !par.choices) {
            item = gui.add(parameters, par.name);
          }
        }
        cb = par.callback || gui.callback;
        console.log(cb);
        if (!cb) {
          continue;
        }
        //console.log(cb)
        if (Array.isArray(cb)) {
          cb_ = (function(cb) {
            return function() {
              var len1, m, results, x;
              results = [];
              for (m = 0, len1 = cb.length; m < len1; m++) {
                x = cb[m];
                results.push(callback_functions[x]());
              }
              return results;
            };
          })(cb);
        } else {
          cb_ = callback_functions[cb];
        }
        item.onChange(cb_);
        parameters.__callbacks[par.name] = cb_;
        parameters.__controllers[par.name] = item;
      }
    }
    parameters.set = function(name, value) {
      var base, ref;
      this[name] = value;
      if (typeof (base = this.__callbacks)[name] === "function") {
        base[name]();
      }
      return (ref = this.__controllers[name]) != null ? ref.updateDisplay() : void 0;
    };
    return r;
  };

  window.updateGui = function(gui) {
    var c, j, k, len, ref, ref1, results, v;
    if (gui.__folders != null) {
      ref = gui.__folders;
      for (k in ref) {
        v = ref[k];
        updateGui(v);
      }
    }
    ref1 = gui.__controllers;
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      c = ref1[j];
      results.push(c.updateDisplay());
    }
    return results;
  };

  
window.updateGui_ = function ( gui ) {

for (var i = 0; i < Object.keys(gui.__folders).length; i++) {

    var key = Object.keys(gui.__folders)[i];
    for (var j = 0; j < gui.__folders[key].__controllers.length; j++ )
    {
        gui.__folders[key].__controllers[j].updateDisplay();
    }
}
}
;

}).call(this);
