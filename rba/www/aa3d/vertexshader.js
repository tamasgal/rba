// Generated by CoffeeScript 2.3.1
(function() {
  window.vertexshader_glsl = "\nprecision highp float;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nattribute vec3 position;\nattribute vec3 offset;\nattribute vec2 uv;\nattribute vec3 orientation;\n\nvarying vec2 vUv;\nvarying vec3 vPos;\nvarying vec3 vNormal;\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  //0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  //0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c            //,0.0,\n               // 0.0,                                0.0,                                0.0,                                1.0\n               );\n}\n\n\nvoid main() {\n  	vUv = uv;\n  \n  	\n	float rot_angle = acos( orientation.y );\n	\n	mat3 R = (rot_angle == 0.0)? mat3(1.0) : rotationMatrix(  normalize( cross( orientation, vec3(0.0, 1.0, 0.0)) ) , rot_angle );\n\n\n  	vNormal = normalize( R * position );\n  \n  vPos = (    modelViewMatrix * vec4( offset +  R * position , 1.0 )     ) .xyz;\n  vec4 v = (    modelViewMatrix * vec4( offset +  R * position , 1.0 )     ) ;\n  gl_Position = projectionMatrix * v;\n}";

}).call(this);
